<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>JiBX/WS: Client Usage</title>
</head>
<body class="composite">

<h1>Client Usage</h1>

<div id="bodycol">
<div class="app">
<div class="h3">

<h3><a name="basics">Client Usage</a></h3>

<p>The JiBX/WS client implementation uses a simple message exchange pattern. This is implemented in protocol
specific subclasses of the <a href="%api%/org/jibx/ws/client/Client.html">Client</a> class. You specify the target service access location when
you create an instance of these classes, along with the JiBX binding factory for the bindings used by the web service,
and, optionally, with options specifying the encoding and format of the output. Once the instance has been created, you 
use the <code>call()</code>
method to actually invoke the service. Here's an example:</p>

<p></p>

<div id="source"><pre>    // initialize SOAP client for service
    IBindingFactory fact = BindingDirectory.getFactory(Query.class);
    Client client = new SoapClient("http://localhost:8080/jibxws/quake", fact);
    ...
    // set up the query and pass in call to server
    Query query = new Query();
    ...
    Response response = (Response)client.call(query);
</pre></div>

<p>This accesses a service located at <i>http://localhost:8080/jibxws/quake</i>. Since JiBX/WS is
intended only for doc/lit web services, the operation to be performed by the service is always determined by the root
element of the request body. With JiBX/WS the request body is generated by marshalling out the object supplied to the 
<a href="%api%/org/jibx/ws/client/Client.html#call(java.lang.Object)">Client.call()</a> method using the binding configured when 
the <code>Client</code> instance is created. The response message body is
unmarshalled to create an object, which is then returned by the <code>Client.call()</code> method.</p>

<p>The constructor takes a single binding factory parameter since it is expected that a single binding definition would
define the bindings for all request and response objects, and for any SOAP Fault details objects.  
If this is not the case, the client includes separate methods for setting the binding factory for each of the request, 
response and SOAP body objects.</p>   

<p>The SoapClient also include options to set SOAP headers, add SOAP header handlers and set SOAP Fault handlers.</p>

<p>Rather than specifying a concrete <code>Client</code> subclass, you can use the
<a href="%api%/org/jibx/ws/protocol/Protocol.html#createClient(java.lang.String, org.jibx.runtime.IBindingFactory, org.jibx.ws.io.MessageOptions)">Protocol.createClient()</a>
method. This allows the same client code to be used with different protocols. See the Seismic example application for an
example of this approach.</p>

<p>The default for output XML generated by the client is to use a UTF-8 text encoding without added spaces or line
breaks. You can alter these settings using the <a href="%api%/org/jibx/ws/io/MessageOptions.html">MessageOptions</a> parameter to the <code>Client</code>
constructor.</p>

<p>The current main client limitation is the restriction to a simple generic <code>call()</code> method that takes a
<code>java.lang.Object</code> parameter as input and returns another as the response. Code generation for a client proxy
class to act as a convenient interface for wrapped style services (with multiple parameters) may be added in the future.</p>

<h4>Spring usage</h4>
<p>No special support is currently included for using the Spring Framework on the client side.  The JiBX/WS client can be
configured using Spring, as shown in the <a href="%example%#spring-hello"/>Spring Hello World</a> example.</p>

</div>
</div>
</div>

</body>
</html>
